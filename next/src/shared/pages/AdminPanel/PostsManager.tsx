import React, { ReactElement, useState } from "react";
import PostCard from "../../components/PostCard";
import { Post, PostCategory } from "../../types/Post";
import PostEditor from "./PostEditor";
import styles from "./PostsManager.module.scss";

// –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
const mockCategories: PostCategory[] = [
    {
        id: "travel",
        name: "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è",
        icon: "üéø",
        color: "#17a2b8",
    },
    {
        id: "news",
        name: "–ù–æ–≤–æ—Å—Ç–∏",
        icon: "üì∞",
        color: "#ffc107",
    },
    {
        id: "training",
        name: "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
        icon: "üí™",
        color: "#6f42c1",
    },
];

const mockPosts: Post[] = [
    {
        id: "1",
        title: "–°–ª—ë—Ç –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤ –≤ –ú–æ—Å–∫–≤–µ",
        text: `–í –ú–æ—Å–∫–≤–µ –≤ –ë–∏—Ç—Ü–µ–≤—Å–∫–æ–º –ø–∞—Ä–∫–µ —Å 23 –ø–æ 26 –º–∞—è –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –í—Å–µ—Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è –ø–æ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–º—É –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—é "–°–ª—ë—Ç –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤". –ù–∞—à –º–∞–ª–µ–Ω—å–∫–∏–π —Å–æ—Å—Ç–∞–≤ (—Ç–∞–∫ –∫–∞–∫ —Å—Ç–∞—Ä—à–∏–µ —Ä–µ–±—è—Ç–∞ —Å–¥–∞—é—Ç —ç–∫–∑–∞–º–µ–Ω—ã) –∞–∫—Ç–∏–≤–Ω–æ –ø—Ä–∏–Ω—è–ª –≤ –Ω–∏—Ö —É—á–∞—Å—Ç–∏–µ.<br>
–í—Å–µ –±–æ–ª—å—à–∏–µ –º–æ–ª–æ–¥—Ü—ã, –≤—Å–µ —Å—Ç–∞—Ä–∞–ª–∏—Å—å. –û–¥–Ω–∏ –≤–ø–µ—Ä–≤—ã–µ –ø—Ä–æ–±–æ–≤–∞–ª–∏ —Å–≤–æ–∏ —Å–∏–ª—ã, –¥—Ä—É–≥–∏–µ —Ä–∏—Å–∫–æ–≤–∞–ª–∏, –±–µ–∂–∞–ª–∏ –±—ã—Å—Ç—Ä–æ –∏ —Å—Ç–∞—Ä–∞–ª–∏—Å—å —Ö–æ—Ä–æ—à–æ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è.`,
        createdAt: "2025-05-26T10:00:00Z",
        updatedAt: "2025-05-26T10:30:00Z",
        author: "–¢—Ä–µ–Ω–µ—Ä –∫–æ–º–∞–Ω–¥—ã",
        images: [
            {
                id: "1",
                url: "https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=800&h=600&fit=crop&auto=format",
                alt: "–£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π",
                isMain: true,
            },
        ],
        category: mockCategories[0],
    },
    {
        id: "2",
        title: "–ù–æ–≤–æ–≥–æ–¥–Ω–∏–µ —Å—Ç–∞—Ä—Ç—ã –≤ –ú–æ—Å–∫–≤–µ 2022",
        text: `–ö–æ–º–∞–Ω–¥–∞ "–®–∞—Ö–º–∞—Ç—ã –Ω–∞ –±–µ–≥—É" –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –æ—Ç–∫—Ä—ã–ª–∞ –∑–∏–º–Ω–∏–π —Å–µ–∑–æ–Ω. –í –ë–∏—Ç—Ü–µ–≤—Å–∫–æ–º –ø–∞—Ä–∫–µ –ú–æ—Å–∫–≤—ã –≤ —ç—Ç–∏ –≤—ã—Ö–æ–¥–Ω—ã–µ 23 - 25 –¥–µ–∫–∞–±—Ä—è 2022 –≥–æ–¥–∞ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –í—Å–µ—Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è –ø–æ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–º—É –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –Ω–∞ –ª—ã–∂–∞—Ö "–ù–û–í–û–ì–û–î–ù–ò–ï –°–¢–ê–†–¢–´".`,
        createdAt: "2022-12-25T14:00:00Z",
        updatedAt: "2022-12-25T14:15:00Z",
        author: "–¢—Ä–µ–Ω–µ—Ä –∫–æ–º–∞–Ω–¥—ã",
        images: [
            {
                id: "2",
                url: "https://images.unsplash.com/photo-1551632811-561732d1e306?w=800&h=600&fit=crop&auto=format",
                alt: "–ö–æ–º–∞–Ω–¥–∞ –Ω–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö",
                isMain: true,
            },
        ],
        category: mockCategories[1],
    },
];

const PostsManager = (): ReactElement => {
    const [posts, setPosts] = useState<Post[]>(mockPosts);
    const [isEditorOpen, setIsEditorOpen] = useState(false);
    const [editingPost, setEditingPost] = useState<Post | null>(null);
    const [searchTerm, setSearchTerm] = useState("");
    const [selectedCategory, setSelectedCategory] = useState<string>("all");

    const handleCreatePost = () => {
        setEditingPost(null);
        setIsEditorOpen(true);
    };

    const handleEditPost = (postId: string) => {
        const post = posts.find((p) => p.id === postId);
        if (post) {
            setEditingPost(post);
            setIsEditorOpen(true);
        }
    };

    const handleDeletePost = (postId: string) => {
        if (window.confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø–æ—Å—Ç?")) {
            setPosts(posts.filter((p) => p.id !== postId));
        }
    };

    const handleSavePost = (post: Post) => {
        if (editingPost) {
            // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞
            setPosts(posts.map((p) => (p.id === post.id ? post : p)));
        } else {
            // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞
            const newPost = {
                ...post,
                id: Date.now().toString(),
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString(),
            };
            setPosts([newPost, ...posts]);
        }
        setIsEditorOpen(false);
        setEditingPost(null);
    };

    const handleCloseEditor = () => {
        setIsEditorOpen(false);
        setEditingPost(null);
    };

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤
    const filteredPosts = posts.filter((post) => {
        const matchesSearch =
            post.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
            post.text.toLowerCase().includes(searchTerm.toLowerCase());
        const matchesCategory = selectedCategory === "all" || post.category.id === selectedCategory;
        return matchesSearch && matchesCategory;
    });

    return (
        <div className={styles.postsManager}>
            <div className={styles.header}>
                <h2 className={styles.title}>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–º–∏</h2>
                <button onClick={handleCreatePost} className={styles.createButton}>
                    + –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç
                </button>
            </div>

            <div className={styles.filters}>
                <div className={styles.searchBox}>
                    <input
                        type="text"
                        placeholder="–ü–æ–∏—Å–∫ –ø–æ—Å—Ç–æ–≤..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                        className={styles.searchInput}
                    />
                </div>

                <div className={styles.categoryFilter}>
                    <select
                        value={selectedCategory}
                        onChange={(e) => setSelectedCategory(e.target.value)}
                        className={styles.categorySelect}
                    >
                        <option value="all">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
                        {mockCategories.map((category) => (
                            <option key={category.id} value={category.id}>
                                {category.icon} {category.name}
                            </option>
                        ))}
                    </select>
                </div>
            </div>

            <div className={styles.stats}>
                <div className={styles.stat}>
                    <span className={styles.statNumber}>{posts.length}</span>
                    <span className={styles.statLabel}>–í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤</span>
                </div>
                <div className={styles.stat}>
                    <span className={styles.statNumber}>{filteredPosts.length}</span>
                    <span className={styles.statLabel}>–ü–æ–∫–∞–∑–∞–Ω–æ</span>
                </div>
            </div>

            <div className={styles.postsList}>
                {filteredPosts.length === 0 ? (
                    <div className={styles.emptyState}>
                        <p>–ü–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
                        {searchTerm || selectedCategory !== "all" ? (
                            <button
                                onClick={() => {
                                    setSearchTerm("");
                                    setSelectedCategory("all");
                                }}
                                className={styles.clearFiltersButton}
                            >
                                –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
                            </button>
                        ) : (
                            <button
                                onClick={handleCreatePost}
                                className={styles.createFirstPostButton}
                            >
                                –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç
                            </button>
                        )}
                    </div>
                ) : (
                    filteredPosts.map((post) => (
                        <div key={post.id} className={styles.postItem}>
                            <PostCard
                                post={post}
                                isAdmin={true}
                                onEdit={handleEditPost}
                                onDelete={handleDeletePost}
                                maxTextLines={3}
                            />
                        </div>
                    ))
                )}
            </div>

            {isEditorOpen && (
                <PostEditor
                    post={editingPost}
                    categories={mockCategories}
                    onSave={handleSavePost}
                    onClose={handleCloseEditor}
                />
            )}
        </div>
    );
};

export default PostsManager;
